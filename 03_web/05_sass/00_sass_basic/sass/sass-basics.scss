// (3) mixin
// mixin 함수명은 영문으로 시작하고 영문, 숫자, 하이픈, 언더스코어만 사용할 수 있다.
// mixin 함수의 인자 기본값도 설정할 수 있다.
@mixin fontSizeBgColor($fontSize: 20px, $bgColor: #fff) {
  font-size: $fontSize;
  background-color: $bgColor;
}

@mixin linkStyle($textColor, $textDeco: none) {
  color: $textColor;
  text-decoration: $textDeco;
}

// (4) extend
// 완전히 똑같이 반복되는 코드를 묶어서 관리할 때 사용한다.
%boxShape {
  border-radius: 20px;
  border: 3px solid #f00;
  box-shadow: 0px 3px 11px 0px rgba(0, 0, 0, 0.75);
}

// mixin vs extend
// mixin은 사용되는 속성은 같으나 값만 바뀌는 경우에 사용하고
// extend는 사용되는 속성과 값 모두 똑같을 때 사용한다.

html {
  font-size: 18px; 
}

body {
  margin: 20px;
  background-color: #fff4cf;
}

div {
  color: #333;
  padding: 20px;
}

a {
  display: inline-block;
  margin: 10px 0;
}

#box1 {
  // font-size: 40px;
  // background-color: #ffcccc;
  @include fontSizeBgColor(40px, #ffcccc); // mixin을 불러올 때 @include 키워드를 사용한다.

  // border-radius: 20px;
  // border: 3px solid #f00;
  // box-shadow: 0px 3px 11px 0px rgba(0, 0, 0, 0.75);
  @extend %boxShape; // extend를 불러올 때 @extend 키워드를 사용한다.

  // (1) Nesting
  &:hover{
    background-color: #ccc;
    @media screen and (max-width: 500px) {
      background-color: #999;
    }
  }

  // media query after(SCSS)
  @media screen and (max-width: 500px) {
    font-size: 20px;
  }

  @media screen and (min-width: 501px) and (max-width: 900px) {
    font-size: 30px;
  }

  // '&-title' => '#box1-title'와 같은 의미
  &-title {
    font-style: italic;
    text-decoration: underline;
  }

  // &는 자기 자신 요소를 지칭하게 된다.(여기서는 #box1)
  // 그냥 a만 쓰면 '#box1 a' 와 같이 컴파일이 된다.
  & > a {
    // color: #a22;
    // text-decoration: none;
    @include linkStyle(#a22);

    &:hover {
      // color: #000;
      // text-decoration: underline;
      @include linkStyle(#000, underline);
    }
  }
}

// #box2 스타일링 코드를 nesting에 엄격하게 맞춰서 작성한다면
// 위 #box1 안에 작성할 수 있지만 스크롤을 많이 해야하고
// 한 눈에 포함 관계를 파악하기 다소 어렵다.
// 그래서 이와 같은 경우는 나눠서 작성하는 것이 더 깔끔하다.
#box1 #box2 {
  // font-size: 20px;
  // background-color: #e9e9e9;
  @include fontSizeBgColor(20px, #e9e9e9);
  
  // border-radius: 20px;
  // border: 3px solid #f00;
  // box-shadow: 0px 3px 11px 0px rgba(0, 0, 0, 0.75);
  @extend %boxShape;

  & > a {
    // color: #ee6633;
    // text-decoration: none;
    @include linkStyle(#ee6633);

    &:hover {
      // color: #a22;
      // text-decoration: underline;
      @include linkStyle(#a22, underline);
    }
  }
}

// 아래와 같이 상황에 맞게 코드를 작성하면 된다.
// (1) CSS 포함관계로만 작성
.box1 .box2 .box3 {
  //
}

// (2) Nesting으로만 작성
.box1 {
  .box2 {
    .box3 {
      //
    }
  }
}

// (3) Nesting + CSS 포함관계 섞어서 작성
.box1 {
  .box2 .box3 {
    //
  }
}


// (2) Nesting을 활용한 media query

// before(CSS)
// @media screen and (max-width: 500px) {
//   #box1 {
//     font-size: 20px;
//   }
// }

// @media screen and (min-width: 501px) and (max-width: 900px) {
//   #box1 {
//     font-size: 30px;
//   }
// }

// after(SCSS)
// 상단 코드 참고